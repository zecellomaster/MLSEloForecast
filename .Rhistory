source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(elo_history)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/CalibrationTest.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/CalibrationTest.R')
cal_plot
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(east_standings)
rm(list = ls())
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
teams <-  read.csv(name_location,header = TRUE, fileEncoding="UTF-8-BOM")
View(teams)
elo_history <- vector(mode= "list", dim(teams$Alt_Names [! teams$Alt_Names %in% "N/A"]))
teams$Alt_Names [! teams$Alt_Names %in% "N/A"]
ref_names <- teams$Alt_Names [! teams$Alt_Names %in% "N/A"]
elo_history <- vector(mode= "list", dim(ref_names))
names(elo_history) <- ref_names
#Setting up the list that gets the histories of every team
ref_names <- teams$Alt_Names [! teams$Alt_Names %in% "N/A"]
elo_history <- vector(mode= "list", dim(team_names)[1])
elo_history <- vector(mode= "list", dim(ref_names))
names(elo_history) <- ref_names
elo_history <- vector(mode= "list", dim(ref_names))
ref_names <- teams$Alt_Names [! teams$Alt_Names %in% "N/A"]
elo_history <- vector(mode= "list", dim(ref_names)[1])
names(elo_history) <- ref_names
elo_history <- vector(mode= "list", dim(ref_names)[1])
dim(ref_names)[1]
ref_names <- teams$Alt_Names [! teams$Alt_Names %in% "N/A"]
dim(ref_names)[1]
length(ref_names)
elo_history <- vector(mode= "list", length= length(ref_names))
names(elo_history) <- ref_names
View(elo_history)
names(elo_history) <- ref_names
teams["Alt_Names","Team_Names"]
teams[,c("Alt_Names","Team_Names")]
teams[,c("Alt_Names","Team_Name")]
ref_names <- teams[,c("Alt_Names","Team_Name")] [! teams$Alt_Names %in% "N/A"]
ref_names <- teams[,c("Alt_Names","Team_Name")] [!  teams[,c("Alt_Names","Team_Name")] %in% "N/A"]
View(ref_names)
ref_names <- teams[,c("Alt_Names","Team_Name")] [!  teams[,"Alt_Names"] %in% "N/A"]
ref_names <- teams[-c(10,12,13),c("Alt_Names","Team_Name")]
View(ref_names)
for (i in 1:length(ref_names)){
elo_history[[i]] <- read.csv(paste("./MLS Elo Histories/",ref_names$Team_Name[i]
," History.csv"),header = TRUE, fileEncoding="UTF-8-BOM")
}
for (i in 1:length(ref_names)){
elo_history[[i]] <- read.csv(paste("./MLS Elo Histories/",ref_names$Team_Name[i]
," History.csv", sep=""),header = TRUE, fileEncoding="UTF-8-BOM")
}
View(elo_history)
View(elo_history)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
length(ref_names)
for (i in 1:dim(ref_names)[1]){
elo_history[[i]] <- read.csv(paste("./MLS Elo Histories/",ref_names$Team_Name[i]
," History.csv", sep=""),header = TRUE, fileEncoding="UTF-8-BOM")
}
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(elo_history)
results <- rbind(reg_results,post_resuts)
View(results)
game_type <- data.frame(level = c("Round One","Conference Semifinals", "Conference Finals",
"MLS Cup 2021"),
game_rating = c(30,40,50,60))
View(game_type)
post_results$Weight <- "N/A"
post_results$Weight <- "N/A"
rm(list = ls())
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(post_results)
View(post_results)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
dim(post_results)[1]
for (i in 1:dim(post_results)[1]){
print("Why")
#post_results$Weight <- (game_type$game_rating[grep(post_results$Round[i], game_type$level)])
}
(i in 1:dim(post_results)[1])
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
for (i in dim(post_results)[1]){
print("Why")
#post_results$Weight <- (game_type$game_rating[grep(post_results$Round[i], game_type$level)])
}
for (i in 2){
print("Why")
#post_results$Weight <- (game_type$game_rating[grep(post_results$Round[i], game_type$level)])
}
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
dim(post_results)[1]
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(results)
View(elo_history)
View(results)
results$Date[i]
type(results$Date[i])
typeof(results$Date[i])
View(elo_history)
View(elo_history[[1]])
current_date <- results$Date[i]
as.Date(current_date, format= "%Y-%m-%d")
current_year <- as.character(current_date, format= "%Y")
current_year <- as.character(format(current_date, "%Y"))
current_year <- as.character(format(current_date, format= "%Y"))
format(current_date, format= "%Y")
current_year <- typeof(format(current_date, format= "%Y"))
current_date <- as.Date(results$Date[i], format= "%Y-%m-%d")
current_year <- typeof(format(current_date, format= "%Y"))
current_year <- format(current_date, format= "%Y")
current_year <- format(as.Date(current_date, format= "%Y-%m-%d"), format= "%Y")
current_date <- results$Date[i]
current_year <- format(as.Date(current_date, format= "%Y-%m-%d"), format= "%Y")
elo_history[[1]]$Date
length(elo_history[[1]]$Date)
length()
current_elos <- read.csv(elo_loc,header = TRUE, fileEncoding="UTF-8-BOM")
elo_loc <- "./Data/Current Elo.csv"
current_elos <- read.csv(elo_loc,header = TRUE, fileEncoding="UTF-8-BOM")
View(current_elos)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(current_elo)
View(team_names)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
typeof(team_names$Team_Name)
current_elo <- team_names[,"Team_Name"] #Full name
current_elo[,"Abbr"] <- team_names$Look_For #Abbreviations
current_elo <- team_names[,c("Team_Name","Look_For","Alt_Names")]
current_elo[,"Elo"] <- starting_elo #Elo
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(raw_match_data)
raw_match_data$home[i]
current_elo$Abbr
names(current_elo$Look_For) <- team_names
names(current_elo)$Look_For <- team_names
names(current_elo)["Look_For"] <- team_names
names(current_elo)$Look_For <- "Abbr"
names(current_elo$Look_For) <- "Abbr"
names(current_elo["Look_For"]) <- "Abbr"
View(team_names)
View(current_elo)
names(current_elo["Look_For"]) <- "Abbr"
View(current_elo)
names(current_elo)
names(current_elo)["Look_For"] <- "Abbr"
names(current_elo)[2] <- "Abbr"
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(current_elo)
current_elo$Elo <- (current_elo$Elo * (3/4)) + (starting_elo/4)
View(current_elo)
current_elo$Elo <- round(current_elo$Elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSElo.R')
View(current_elo)
current_elo$Elo <- round((current_elo$Elo * (3/4)) + (starting_elo/4))
write.csv(current_elo,"./Data/Current Elo.csv")
View(current_elo)
current_elos$Elo[grep("Colorado", current_elos$Alt_Names)]
current_elo$Elo[grep("Colorado", current_elo$Alt_Names)]
reg_results <- read.csv(reg_loc,header = TRUE, fileEncoding="UTF-8-BOM")
reg_loc <- "./Data/RegScores.csv"
post_loc <- "./Data/PostScores.csv"
reg_results <- read.csv(reg_loc,header = TRUE, fileEncoding="UTF-8-BOM")
View(reg_results)
View(raw_match_data)
View(reg_results)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
results$Final[i]
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(current_elo)
current_elo <- read.csv(elo_loc,header = TRUE, fileEncoding="UTF-8-BOM")
current_elo <- read.csv(elo_loc,header = TRUE)
View(current_elo)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(post_results)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(post_results)
grep(post_results$Round[i], game_type$level)
post_results$Round[i]
post_results$Round[i][1:7]
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
home_name
View(current_elo)
grep(home_name, current_elo$Alt_Names)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
g_value
k_value
View(results)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
c(current_year, as.character(adjusted_date, format = "%m/%d/%Y"),
home_elo,away_elo,current_elo$Elo[home_index],
current_elo[away_index,"Elo"], home_goals,
away_goals, TRUE, FALSE, k_value)
elo_history[[home_index]][home_row+1,]
for (i in 1:dim(ref_names)[1]){
elo_history[[i]] <- read.csv(paste("./MLS Elo Histories/",ref_names$Team_Name[i]
," History.csv", sep=""),header = TRUE,
fileEncoding="UTF-8-BOM", row.names = TRUE)
}
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(elo_history[[1]])
View(c(current_year, as.character(adjusted_date, format = "%m/%d/%Y"),
home_elo,away_elo,current_elo$Elo[home_index],
current_elo[away_index,"Elo"], home_goals,
away_goals, TRUE, FALSE, k_value))
current_date
current_date %in% elo_history[[away_name]]$Date
elo_history[[away_name]]$Date
as.character(adjusted_date, format = "%m/%d/%Y")
format(current_date, format = "%m/%d/%Y")
format(as.Date(current_date), format = "%m/%d/%Y")
format(as.Date(current_date, format = "%Y-%m-%d"), format = "%m/%d/%Y")
elo_history[[home_index]][home_row+1,] <- c(current_year, as.character(adjusted_date, format = "%m/%d/%Y"),
home_elo,away_elo,current_elo$Elo[home_index],
current_elo[away_index,"Elo"], home_goals,
away_goals, TRUE, FALSE, k_value)
View(elo_history[[home_index]])
for (i in 1:dim(ref_names)[1]){
elo_history[[i]] <- read.csv(paste("./MLS Elo Histories/",ref_names$Team_Name[i]
," History.csv", sep=""),header = TRUE,
fileEncoding="UTF-8-BOM", row.names = 1)
}
View(elo_history[[home_index]])
View(teams)
View(ref_names)
ref_names$Alt_Names[30]
ref_names$Alt_Names[27]
current_elo <- current_elo[-c(10,12,13),]
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
round(k_value * g_value * (1 - home_win_exp)) + home_elo
home_win_exp
g_value
home_elo
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(c(current_year, as.character(adjusted_date, format = "%m/%d/%Y"),
home_elo,away_elo,current_elo$Elo[home_index],
current_elo[away_index,"Elo"], home_goals,
away_goals, TRUE, FALSE, k_value))
as.character(adjusted_date, format = "%m/%d/%Y")
format(as.Date(current_date, format= date_format))
as.Date(current_date, format= date_format)
typeof(as.Date(current_date, format= date_format))
View(elo_history[[home_index]][home_row+1,])
View(current_elo)
View(c(current_year, as.character(adjusted_date, format = "%m/%d/%Y")
,away_elo, home_elo,current_elo$away_index["Elo"],
current_elo[home_index,"Elo"],away_goals,
home_goals, FALSE,TRUE, k_value))
View(c(current_year, as.character(adjusted_date, format = "%m/%d/%Y")
,away_elo, home_elo,current_elo$Elo[away_index],
current_elo[home_index,"Elo"],away_goals,
home_goals, FALSE,TRUE, k_value))
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
round(k_value * g_value * (0.5 - home_win_exp)) + home_elo
home_win_exp
home_elo
away_elo
current_elo
current_elo$Elo[away_index]
away_index
away_name
View(elo_history[["Toronto FC"]])
results$Date[i]
adjusted_date <- format(as.Date(current_date, format= date_format))
adjusted_date
as.Date(current_date)
typeof(as.Date(current_date))
adjusted_date <- format(as.Date(current_date, format= "%m/%d/%Y"))
adjusted_date
adjusted_date <- as.Date(current_date, format= date_format)
adjusted_date
as.character(adjusted_date, format = "%m/%d/%Y")
current_date <- as.character(as.Date(results$Date[i], format= date_format), format = "%m/%d/%Y")
current_date
format(as.Date(current_date, format= "%m/%d/%Y"), format= "%Y")
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSEloUpdater.R')
View(elo_history[["Toronto FC"]])
View(current_elo)
View(current_elo)
write.csv(current_elo, "./Data/Current Elo.csv")
test <- read.csv(elo_loc,header = TRUE)
View(test)
View(teams)
results[,c("Home_Wins","Away_Wins", "Ties")] <- 0
View(results)
View(results)
length(reg_results)
library(SoccerEloForecast)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/ScoreMatrix.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
View(odds)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/ScoreMatrix.R')
score_matrix
plot_data <- ggplot(goal_probs, aes(x = home_res,y = away_res, fill = Freq)) +
geom_tile() +  xlab(paste(home_name, "Goals Scored")) + ylab(paste(away_name, " Goals Scored")) +
geom_text(aes(label=Freq))+
ggtitle(paste("Projected Scores for ", home_name, " vs ", away_name, " (", match_date_raw, ") ", sep = "")) +
scale_fill_gradient2(low = "white", high = "red", name = "% Chance") +
theme_minimal() #+ guide_legend()
score_matrix <- plot_data + stat_bin2d()
score_matrix
grep("2019",elo_history[[1]])
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
grep("2019",elo_history[[1]])
grep("2019",elo_history[[1]]$Year  )
grepl("2019",elo_history[[1]]$Year  )
reg_results$Date[1]
as.Date(reg_results$Date[1], date_format)
date_format = "%Y-%m-%d"
as.Date(reg_results$Date[1], date_format)
format("2019-03-02")
format("2019-03-02","%M,%Y,%D")
test <- as.Date(reg_results$Date[1], date_format)
typeof(test)
typeof(reg_results$Date[1])
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
View(odds)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/TestingGames.R')
View(odds)
names(odds) <- c("home_goals", "away_goals")
odds[1]
odds[1,1]
odds[1,2]
reg_odds <- write.csv(odds_loc,header = TRUE, fileEncoding="UTF-8-BOM")
reg_odds_loc <-"./Data/Reg Odds.csv"
reg_odds <- write.csv(reg_odds_loc,header = TRUE, fileEncoding="UTF-8-BOM")
reg_odds <- write.csv(reg_odds_loc,header = TRUE, fileEncoding="UTF-8-BOM")
reg_odds <- read.csv(reg_odds_loc, header = TRUE, fileEncoding="UTF-8-BOM")
View(reg_odds)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
reg_results$Final[1]
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(reg_odds)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
sim_match <- gameprediction(1,c(home_elo,away_elo), c(home_status,FALSE), list(home_data, away_data))
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
sim_match$home_score[1] - sim_match$away_score[1]
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
sim_match$home_score[1] - sim_match$away_score[1]
View(sim_match)
sim_match$home_score[1]
sim_match$home_score
score_diff <- abs(sim_match$home_goals[1] - sim_match$away_goalsS[1])
sim_match$home_goals[1] - sim_match$away_goalsS[1]
sim_match$home_goals[1]
sim_match$away_goalsS[1]
sim_match$away_goals[1]
abs(sim_match$home_goals[1] - sim_match$away_goals[1])
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
home_elo
home_win_exp
g_value
k_value
View(ref_names)
View(reg_results)
reg_results$Weight <- 20
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
reg_odds <- read.csv(reg_odds_loc, header = TRUE, fileEncoding="UTF-8-BOM")
View(reg_odds)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(away_data)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(reg_odds)
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(current_elo)
score_diff
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
round(k_value * g_value * (0.5 - home_win_exp))
round(k_value * g_value * (0.5 - away_win_exp))
round(k_value * g_value * (1 - home_win_exp))
round(k_value * g_value * (1 - home_win_exp))
round(k_value * g_value * (0 - away_win_exp))
round(k_value * g_value * (0 - away_win_exp))
round(k_value * g_value * (0 - home_win_exp))
View(comp_standings)
comp_standings$Team
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(elo_history)
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
View(reg_results)
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
reg_results$Away[11] == comp_standings$Alt_Names[6]
comp_standings$Alt_Names[]
comp_standings$Alt_Names[30]
home_name
grep(home_name,comp_standings$Team)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(current_elo)
View(comp_standings)
View(home_data)
mean(current_elo$Elo)
1/((10^((-(home_elo - away_elo + 100))/400)+1))
View(comp_standings)
1/((10^((-(home_elo - away_elo + 100))/400)+1))
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(comp_standings)
current_elo <- read.csv(elo_loc,header = TRUE, row.names = 1)
mean(current_elo$Elo)
comp_standings <- teams[,c("Alt_Names", "Team_Name","Conference")]
comp_standings[,c("Points","Num_Wins","Goal_Diff","Goals_For")] <- 0
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
comp_standings <- teams[,c("Alt_Names", "Team_Name","Conference")]
comp_standings[,c("Points","Num_Wins","Goal_Diff","Goals_For")] <- 0
comp_standings$Alt_Names[9]
View(sim_match)
sim_match$away_goals[1]
comp_standings$Goals_For[away_pos]
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
comp_standings$Goals_For[away_pos] + sim_match$away_goals[1]
comp_standings$Goals_For[away_pos] + sim_match$aways_goals[1]
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(current_elo)
mean(current_elo$Elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
mean(current_elo$Elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(current_elo)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(sim_match)
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
#To do: Calculate the season standings and start postseason simulations
for (i in 1:dim(comp_standings)[1]){
if (comp_standings$Conference[i] == "E"){
last_row <- nrow(east_standings)
east_standings[last_row + 1,] <- comp_standings[i,]
}else if(comp_standings$Conference[i] == "W"){
last_row <- nrow(west_standings)
west_standings[last_row + 1,] <- comp_standings[i,]
}
}
View(west_standings)
View(east_standings)
dim(west_standings)
east_standings <- read.csv(con_format,header = TRUE, fileEncoding="UTF-8-BOM")
west_standings <- read.csv(con_format,header = TRUE, fileEncoding="UTF-8-BOM")
View(west_standings)
#To do: Calculate the season standings and start postseason simulations
for (i in 1:dim(comp_standings)[1]){
if (comp_standings$Conference[i] == "E"){
last_row <- nrow(east_standings)
east_standings[last_row + 1,] <- comp_standings[i,]
}else if(comp_standings$Conference[i] == "W"){
last_row <- nrow(west_standings)
west_standings[last_row + 1,] <- comp_standings[i,]
}
}
View(east_standings)
X<-split(comp_standings, comp_standings$Conference)
View(X)
X[[1]]
test <- order(west_standings, west_standings$Points)
test <- order(west_standings$Team, west_standings$Points)
test <- order(west_standings$Points, west_standings$Points)
test <- order(west_standings$Points, west_standings$Num_Wins)
test <- order(-west_standings$Points)
test <- order(-west_standings$Points, west_standings$Num_Wins, west_standings$Goal_Diff, west_standings$Goals_For)
View(comp_standings)
View(comp_standings)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
View(season_odds)
View(reg_odds)
View(reg_odds)
debugSource('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
source('C:/Users/BOSS COMPUTER/Desktop/MLS Project/MLSForecast.R')
